server:
  port: 8080

catalog:
  datasource:
    url: 'jdbc:postgresql://catalog-database:5432/catalog'
    username: catalog
    password: mysecretpassword
    initialize: true
    initialization-mode: always
    schema: 'classpath:/schema.sql'
    continue-on-error: 'true'

inventory:
  url: 'inventory.coolstore-inventory-dev.svc.cluster.local'

prometheus:
  enabled: 'true'
  endpoints: 'info,health,metrics,prometheus'

hystrix:
  enabled: 'true'
  timeoutInMilliseconds: 20000
---
server:
  port: 8081
spring:
  config:
    activate:
      on-profile: default
  datasource:
    url: 'jdbc:h2:mem:catalog;DB_CLOSE_ON_EXIT=FALSE'
    username: sa
    password: sa
    driver-class-name: 'org.h2.Driver'
    initialize: 'true'
    initialization-mode: always
    schema: 'classpath:/schema.sql'
    continue-on-error: 'true'
inventory:
  url: 'http://localhost:8080'
---
server:
  port: 8080
spring:
  config:
    activate:
      on-profile: openshift-dev
  datasource:
    url: 'jdbc:postgresql://catalog-database:5432/catalog'
    username: catalog
    password: mysecretpassword
    initialize: 'true'
    initialization-mode: always
    schema: 'classpath:/schema.sql'
    continue-on-error: 'true'
inventory:
  url: 'inventory.coolstore-inventory-dev.svc.cluster.local'
management:
  metrics:
    export:
      prometheus:
        enabled: 'true'
    endpoints:
      web:
        exposure:
          include: 'info,health,metrics,prometheus'
feign:
  hystrix:
    enabled: 'true'
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 20000
---
server:
  port: ${server.port}
spring:
  config:
    activate:
      on-profile: openshift
  datasource:
    url: ${catalog.datasource.url}
    username: ${catalog.datasource.username}
    password: ${catalog.datasource.password}
    initialize: ${catalog.datasource.initialize}
    initialization-mode: ${catalog.datasource.initialization-mode}
    schema: ${catalog.datasource.schema}
    continue-on-error: ${catalog.datasource.continue-on-error}
inventory:
  url: ${inventory.url}
management:
  metrics:
    export:
      prometheus:
        enabled: ${prometheus.enabled}
    endpoints:
      web:
        exposure:
          include: ${prometheus.endpoints}
feign:
  hystrix:
    enabled: ${hystrix.enabled}
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: ${hystrix.timeoutInMilliseconds}